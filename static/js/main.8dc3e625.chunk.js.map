{"version":3,"sources":["components/Canvas.js","PrivateRoute.js","actions/types.js","FakePromise.js","components/Logout.js","actions/index.js","components/Navbar.js","components/Login.js","components/Private.js","App.js","serviceWorker.js","reducers/auth.js","reducers/index.js","index.js"],"names":["CanvasWrap","styled","div","Canvas","props","children","connect","state","authenticated","auth","Component","component","alert","rest","render","rpr","to","pathname","from","location","CREDENTIALS","delay","Promise","resolve","reject","setTimeout","dispatch","logout","type","className","style","cursor","onClick","Navbar","Login","handleValueChange","eve","setState","target","name","value","handleSubmit","a","preventDefault","login","history","push","error","message","email","password","this","textDecoration","onSubmit","onChange","placeholder","required","minLength","data","FakePromise","payload","Private","Protected","App","exact","path","flexflow","Boolean","window","hostname","match","initialState","token","present","combineReducers","action","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","reducer","applyMiddleware","thunk","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.8dc3e625.chunk.js","sourcesContent":["import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst CanvasWrap = styled.div`\r\n    position: absolute;\r\n    left: 0;\r\n    right:0;\r\n    top: 3.5rem;\r\n    bottom: 0;\r\n    margin: 0;\r\n    background-color: white;\r\n    display: flex;\r\n    flex-flow: row wrap;\r\n    justify-content: space-evenly;\r\n    overflow: auto;\r\n    padding-bottom: 2rem;\r\n`;\r\n\r\nconst Canvas = (props) => {\r\n    return(\r\n        <CanvasWrap>\r\n            {props.children}\r\n        </CanvasWrap>\r\n    )\r\n}\r\n\r\nexport default Canvas;","import React from 'react';\r\nimport {Route, Redirect} from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport Canvas from './components/Canvas';\r\n\r\nconst PrivateRoute = ({component:Component,alert, authenticated, ...rest}) => {\r\n    return (\r\n       <Route {...rest} render={(rpr) => (\r\n           authenticated===true?<Canvas><Component {...rpr}/></Canvas>:<Redirect to={{pathname: \"/reactauth/login\", state:{from: rpr.location.pathname, alert: alert}}} />\r\n       )} />\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        authenticated: state.auth.authenticated\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(PrivateRoute);","export const LOGIN = 'LOGIN';\r\nexport const LOGIN_ERROR = 'LOGIN_ERROR';\r\nexport const LOGOUT = 'LOGOUT';\r\nexport const CREDENTIALS = {email: 'foobar@example.com', password: 'hellothere1234', token: 'secure_jwt_token'}","export default (delay) => new Promise((resolve,reject) => {\r\n    setTimeout(resolve,delay);\r\n})","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport {logout} from '../actions';\r\n\r\nconst Logout = ({authenticated, logout}) => {\r\n    return (\r\n        authenticated?<li className=\"navbar__item\" style={{cursor: 'pointer'}} onClick={logout}>Logout</li>:null\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        authenticated: state.auth.authenticated\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        logout: () => dispatch(logout())\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(Logout);","import {LOGIN,LOGIN_ERROR,CREDENTIALS, LOGOUT} from './types';\r\nimport FakePromise from '../FakePromise';\r\n\r\nexport const login = (data) => async (dispatch) => {\r\n    await FakePromise(1000);\r\n    const {email,password} = data;\r\n    if(email === CREDENTIALS.email&&password===CREDENTIALS.password)\r\n        dispatch({type: LOGIN, payload: CREDENTIALS.token});\r\n    else\r\n        dispatch({type: LOGIN_ERROR, payload: 'Credentials do not match'});\r\n}\r\n\r\nexport const logout = () => (dispatch) => {\r\n    dispatch({type:LOGOUT});\r\n}","import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport Logout from './Logout';\r\nimport './Navbar.css';\r\n\r\nclass Navbar extends Component {\r\n    render() {\r\n        return (\r\n            <div className='navbar'>\r\n                <ul className=\"navbar__list\">\r\n                    <Link to=\"/reactauth/\"><li className=\"navbar__item navbar__item--brand\">\r\n                        Home\r\n                    </li></Link>\r\n                    <li className=\"navbar__item\"><Link to=\"/reactauth/protected-route-1\">Protected Route 1</Link></li>\r\n                    <li className=\"navbar__item\"><Link to=\"/reactauth/protected-route-2\">Protected Route 2</Link></li>\r\n                    <li className=\"navbar__item\"><Link to=\"/reactauth/login\">Login</Link></li>\r\n                    <li className=\"navbar__item\"><Link to=\"/reactauth/public-route\">Public Route</Link></li>\r\n                    <Logout />\r\n                </ul>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Navbar;","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport {login} from '../actions';\r\n\r\nclass Login extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            email: '',\r\n            password: ''\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        if(this.props.location.state)\r\n            alert(this.props.location.state.alert)\r\n        if(this.props.auth.authenticated) {\r\n            alert(\"You are logged in\");\r\n            const from = this.props.location.state?this.props.location.state.from:'/reactauth/';\r\n            this.props.history.push(from);\r\n        }\r\n    }\r\n\r\n    handleValueChange = (eve) => {\r\n        this.setState({\r\n            [eve.target.name] : eve.target.value\r\n        });\r\n    }\r\n\r\n    handleSubmit = async (eve) => {\r\n        eve.preventDefault();\r\n        await this.props.login(this.state);\r\n        if(this.props.auth.authenticated)\r\n        {\r\n            alert(\"Login successful\"); \r\n            const from = this.props.location.state?this.props.location.state.from:'/reactauth/';\r\n            this.props.history.push(from);\r\n        }\r\n        else {\r\n            alert(this.props.auth.error.message)\r\n            this.props.history.push('/reactauth/login');\r\n        }\r\n        this.setState({\r\n            email: '',\r\n            password: ''\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className='card'>\r\n                <h2 style={{textDecoration: 'underline'}}>Login</h2>\r\n                <form className=\"form\" onSubmit={this.handleSubmit}>\r\n                    <input type=\"email\" value={this.state.email} name=\"email\" onChange={this.handleValueChange} placeholder=\"Enter your email\" required/>\r\n                    <input type=\"password\" minLength={8} value={this.state.password} name=\"password\" onChange={this.handleValueChange} placeholder=\"Enter password\" />\r\n                    <button><div className='btn'>Submit</div></button>\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        auth: state.auth\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        login: (data) => dispatch(login(data))\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(Login);","import React from 'react'\r\n\r\nexport const Private = () => {\r\n    return (\r\n        <div>\r\n            <h2>This is a private route 1, you are authenticated</h2>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const Protected = () => {\r\n    return (\r\n        <div>\r\n            <h2>This is a private route 2, you are authenticated</h2>\r\n        </div>\r\n    )\r\n}","import React from 'react';\nimport {Switch,Route} from 'react-router-dom';\nimport PrivateRoute from './PrivateRoute';\nimport './Components.css';\nimport './App.css';\nimport Navbar from './components/Navbar';\nimport Canvas from './components/Canvas';\nimport Login from './components/Login';\nimport {Private,Protected} from './components/Private';\n\nconst homePage = () => <Canvas >\n    <div style={{flexflow: 'column nowrap'}}>\n    <h1>Welcome</h1>\n    <h2>To login in, enter</h2>\n    <h3>Email = foobar@example.com</h3>\n    <h3>Password = hellothere1234</h3>\n    </div>\n  </Canvas>\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Navbar />\n      <Switch>\n        <Route exact path=\"/reactauth/\" component={() => homePage()} />\n        <Route exact path=\"/reactauth/public-route\" component={(rpr) => <Canvas {...rpr}><h1>This is a public route</h1></Canvas>} />\n        <Route exact path=\"/reactauth/login\" component={(rpr) => <Canvas><Login {...rpr}/></Canvas>} />\n        <PrivateRoute exact path=\"/reactauth/protected-route-1\" component={Private} alert=\"Please login to continue\"/>\n        <PrivateRoute exact path=\"/reactauth/protected-route-2\" component={Protected} alert=\"Please login to continue\"/>\n        <Route path=\"*\" component={() => <Canvas><h2>404! Not found</h2></Canvas>} />\n      </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {LOGIN,LOGIN_ERROR,LOGOUT} from '../actions/types';\r\n\r\nconst initialState = {\r\n    authenticated: null,\r\n    token: null,\r\n    error: {\r\n        present: null,\r\n        message: null\r\n    }\r\n}\r\n\r\nexport default (state=initialState,action) => {\r\n    switch (action.type) {\r\n        case LOGIN:\r\n            return {...state,authenticated:true, token: action.payload};\r\n        case LOGIN_ERROR: \r\n            return {...state,error: {present: true, message: action.payload}};\r\n        case LOGOUT:\r\n            return initialState;\r\n        default:\r\n            return state;\r\n    }\r\n}","import {combineReducers} from 'redux';\r\nimport auth from './auth';\r\n\r\nexport default combineReducers({\r\n    auth: auth\r\n});","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {BrowserRouter as Router} from 'react-router-dom';\nimport {compose,createStore,applyMiddleware} from 'redux';\nimport {Provider} from 'react-redux';\nimport thunk from 'redux-thunk';\nimport * as serviceWorker from './serviceWorker';\nimport reducer from './reducers/index';\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__||compose;\nconst store = createStore(reducer,composeEnhancers(applyMiddleware(thunk)))\n\nReactDOM.render(\n  <Provider store={store}>\n  <Router>\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n  </Router>\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}